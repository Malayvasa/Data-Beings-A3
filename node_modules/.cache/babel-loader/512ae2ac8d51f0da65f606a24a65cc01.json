{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant'; // Fixing inconsistencies from older browsers\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n\nvar aliases = new Map([['Win', 'Meta'], ['Scroll', 'ScrollLock'], ['Spacebar', ' '], ['Down', 'ArrowDown'], ['Left', 'ArrowLeft'], ['Right', 'ArrowRight'], ['Up', 'ArrowUp'], ['Del', 'Delete'], ['Crsel', 'CrSel'], ['Exsel', 'ExSel'], ['Apps', 'ContextMenu'], ['Esc', 'Escape'], ['Decimal', '.'], ['Multiply', '*'], ['Add', '+'], ['Subtract', '-'], ['Divide', '/']]);\n\nvar shimKeyboardEvent = function shimKeyboardEvent(event) {\n  if (aliases.has(event.key)) {\n    var key = aliases.get(event.key);\n    Object.defineProperty(event, 'key', {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return key;\n      }\n    });\n  }\n};\n\nvar useKeypress = function useKeypress(keys, handler) {\n  !(Array.isArray(keys) || typeof keys === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `keys` to be an array or string') : invariant(false) : void 0;\n\n  if (Array.isArray(keys)) {\n    keys.forEach(function (key, i) {\n      !(typeof key === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected `keys[\" + i + \"]` to be a string\") : invariant(false) : void 0;\n    });\n  }\n\n  !(typeof handler === 'function' || handler == null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      shimKeyboardEvent(event);\n\n      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {\n        handler == null ? void 0 : handler(event);\n      }\n    };\n  }, [keys, handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      eventListenerRef.current(event);\n    };\n\n    window.addEventListener('keydown', eventListener);\n    return function () {\n      window.removeEventListener('keydown', eventListener);\n    };\n  }, []);\n};\n\nexport default useKeypress;","map":{"version":3,"sources":["../src/shimKeyboardEvent.js","../src/index.js"],"names":["aliases","shimKeyboardEvent","event","key","Object","configurable","enumerable","get","useKeypress","Array","keys","handler","eventListenerRef","useRef","useEffect","eventListener","window"],"mappings":"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","sourcesContent":["// Fixing inconsistencies from older browsers\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst aliases = new Map([\n  ['Win', 'Meta'],\n  ['Scroll', 'ScrollLock'],\n  ['Spacebar', ' '],\n  ['Down', 'ArrowDown'],\n  ['Left', 'ArrowLeft'],\n  ['Right', 'ArrowRight'],\n  ['Up', 'ArrowUp'],\n  ['Del', 'Delete'],\n  ['Crsel', 'CrSel'],\n  ['Exsel', 'ExSel'],\n  ['Apps', 'ContextMenu'],\n  ['Esc', 'Escape'],\n  ['Decimal', '.'],\n  ['Multiply', '*'],\n  ['Add', '+'],\n  ['Subtract', '-'],\n  ['Divide', '/'],\n]);\n\nconst shimKeyboardEvent = (event) => {\n  if (aliases.has(event.key)) {\n    const key = aliases.get(event.key);\n\n    Object.defineProperty(event, 'key', {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return key;\n      },\n    });\n  }\n};\n\nexport default shimKeyboardEvent;\n","import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\nimport shimKeyboardEvent from './shimKeyboardEvent';\n\nconst useKeypress = (keys, handler) => {\n  invariant(\n    Array.isArray(keys) || typeof keys === 'string',\n    'Expected `keys` to be an array or string'\n  );\n  if (Array.isArray(keys)) {\n    keys.forEach((key, i) => {\n      invariant(\n        typeof key === 'string',\n        `Expected \\`keys[${i}]\\` to be a string`\n      );\n    });\n  }\n  invariant(\n    typeof handler === 'function' || handler == null,\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      shimKeyboardEvent(event);\n      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {\n        handler?.(event);\n      }\n    };\n  }, [keys, handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => {\n      eventListenerRef.current(event);\n    };\n    window.addEventListener('keydown', eventListener);\n    return () => {\n      window.removeEventListener('keydown', eventListener);\n    };\n  }, []);\n};\n\nexport default useKeypress;\n"]},"metadata":{},"sourceType":"module"}